#server
#server.port=8089
#server.contextPath=/bookstore

# Enable the default error page displayed in browsers in case of a server error.
#server.error.whitelabel.enabled=false 


#thymeleaf
spring.thymeleaf.mode=HTML

#Data Source
#spring.datasource.url=jdbc:mysql://localhost/bookstore?useSSL=false
#spring.datasource.username=root
#spring.datasource.password=root

#CLEARDB_DATABASE_URL: 
#mysql://b9e94889d2b1d9:a10cfb58@us-cdbr-iron-east-05.cleardb.net/heroku_f119e63cf8cc2c4?reconnect=true
spring.datasource.url=jdbc:mysql://us-cdbr-iron-east-05.cleardb.net/heroku_f119e63cf8cc2c4?reconnect=true
spring.datasource.username=b9e94889d2b1d9
spring.datasource.password=a10cfb58


#Permite que o Hibernate gere SQL otimizado para o MySQL
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# No MySQL se a conexão do banco de dados estiver inativa por 
# mais de 8 horas (28800 segundos), a conexão será automaticamente fechada 
# link: https://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html#sysvar_wait_timeout

# *** necessário em produção ***
#spring.datasource.testWhileIdle = true
#spring.datasource.timeBetweenEvictionRunsMillis = 60000
#spring.datasource.validationQuery = SELECT 1

# A cada minutos (60000 milis) será executado um teste de conexão 
# executando a consulta "SELECT 1" de validação. Desta forma, podemos manter viva a 
#conexão do banco de dados, e evitar chegar ao timeout do MySQL.

# exibe as conexões do banco de dados no log
spring.jpa.show-sql=true

#Hibernate ddl auto (create, create-drop, update, validate):
# Schema será atualizado automaticamente de acordo com as entidades java 
# encontradas no projeto
spring.jpa.hibernate.ddl-auto=update